
import torch
import torch.nn as nn
from torch.autograd import Variable
from functools import reduce

class LambdaBase(nn.Sequential):
    def __init__(self, fn, *args):
        super(LambdaBase, self).__init__(*args)
        self.lambda_func = fn

    def forward_prepare(self, input):
        output = []
        for module in self._modules.values():
            output.append(module(input))
        return output if output else input

class Lambda(LambdaBase):
    def forward(self, input):
        return self.lambda_func(self.forward_prepare(input))

class LambdaMap(LambdaBase):
    def forward(self, input):
        return list(map(self.lambda_func,self.forward_prepare(input)))

class LambdaReduce(LambdaBase):
    def forward(self, input):
        return reduce(self.lambda_func,self.forward_prepare(input))


step1 = nn.Sequential( # Sequential,
	nn.Conv2d(3,64,(7, 7),(2, 2),(3, 3)),
	nn.BatchNorm2d(64),
	nn.ReLU(),
	nn.MaxPool2d((3, 3),(2, 2),(1, 1)),
	nn.Sequential( # Sequential,
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(64,64,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(64),
					nn.ReLU(),
					nn.Conv2d(64,64,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(64),
				),
				Lambda(lambda x: x), # Identity,
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(64,64,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(64),
					nn.ReLU(),
					nn.Conv2d(64,64,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(64),
				),
				Lambda(lambda x: x), # Identity,
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
	),
	nn.Sequential( # Sequential,
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(64,128,(3, 3),(2, 2),(1, 1)),
					nn.BatchNorm2d(128),
					nn.ReLU(),
					nn.Conv2d(128,128,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(128),
				),
				nn.Conv2d(64,128,(1, 1),(2, 2)),
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(128,128,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(128),
					nn.ReLU(),
					nn.Conv2d(128,128,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(128),
				),
				Lambda(lambda x: x), # Identity,
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
	),
	nn.Sequential( # Sequential,
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(128,256,(3, 3),(2, 2),(1, 1)),
					nn.BatchNorm2d(256),
					nn.ReLU(),
					nn.Conv2d(256,256,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(256),
				),
				nn.Conv2d(128,256,(1, 1),(2, 2)),
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(256,256,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(256),
					nn.ReLU(),
					nn.Conv2d(256,256,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(256),
				),
				Lambda(lambda x: x), # Identity,
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
	),
	nn.Sequential( # Sequential,
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(256,512,(3, 3),(2, 2),(1, 1)),
					nn.BatchNorm2d(512),
					nn.ReLU(),
					nn.Conv2d(512,512,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(512),
				),
				nn.Conv2d(256,512,(1, 1),(2, 2)),
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
		nn.Sequential( # Sequential,
			LambdaMap(lambda x: x, # ConcatTable,
				nn.Sequential( # Sequential,
					nn.Conv2d(512,512,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(512),
					nn.ReLU(),
					nn.Conv2d(512,512,(3, 3),(1, 1),(1, 1)),
					nn.BatchNorm2d(512),
				),
				Lambda(lambda x: x), # Identity,
			),
			LambdaReduce(lambda x,y: x+y), # CAddTable,
			nn.ReLU(),
		),
	),
	nn.ConvTranspose2d(512,384,(5, 5),(2, 2),(2, 2),(1, 1)),
	nn.BatchNorm2d(384),
	nn.ReLU(),
	LambdaMap(lambda x: x, # ConcatTable,
		nn.Sequential( # Sequential,
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,192,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(192),
			nn.ReLU(),
			nn.ConvTranspose2d(192,96,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(96),
			nn.ReLU(),
			nn.Conv2d(96,3,(5, 5),(1, 1),(2, 2)),
		),
		nn.Sequential( # Sequential,
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,192,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(192),
			nn.ReLU(),
			nn.ConvTranspose2d(192,96,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(96),
			nn.ReLU(),
			nn.Conv2d(96,1,(5, 5),(1, 1),(2, 2)),
		),
		nn.Sequential( # Sequential,
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,384,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(384),
			nn.ReLU(),
			nn.ConvTranspose2d(384,192,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(192),
			nn.ReLU(),
			nn.ConvTranspose2d(192,96,(5, 5),(2, 2),(2, 2),(1, 1)),
			nn.BatchNorm2d(96),
			nn.ReLU(),
			nn.Conv2d(96,1,(5, 5),(1, 1),(2, 2)),
		),
	),
)